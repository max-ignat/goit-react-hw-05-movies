{"version":3,"file":"static/js/267.85488613.chunk.js","mappings":"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","sources":["modules/Movies/Movies.styled.js","modules/Searchbar/Searchbar.styled.js","modules/Searchbar/Searchbar.jsx","pages/MovieSearch/MovieSearch.jsx","services/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const MovieList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  \n`;\n\nexport const MovieItem = styled.li`\ntext-decoration:none;\nlist-style:none;\n`\n\nexport const PosterTitle = styled.p`\n  font-weight: bold;\n  color: #25468e;\n  margin-bottom: 15px;\n  text-align:center;\n`;\n\nexport const FilmPoster = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n  border-radius: 5px;\n  width: 280px;\n  height: 400px;\n  margin-left: 35px;\n  box-shadow: rgb(0 0 0 / 70%) 5px 5px 13px 0px;\n`;\nexport const InfoWrap = styled.div`\n  margin-left: 35px;\n  width: 500px;\n`;\n\nexport const CardWrap = styled.div`\n  display: flex;\n  margin-top: 35px;\n`;\n\nexport const Title = styled.p`\n  font-weight: bold;\n  font-size: 32px;\n  color: #25468e;\n  margin-bottom: 20px;\n  text-align:center;\n`;","import styled from \"styled-components\";\n\nexport const SearchbarHeader = styled.header`\n  width: 100%;\n  top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  /* justify-content: center; */\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: #3f51b5;\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n`;\n\nexport const SearchFormButton = styled.button`\n\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  /* background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg'); */\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormButtonLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 18px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  &:hover {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport Notiflix from 'notiflix';\n// import PacmanLoader from 'react-spinners/BeatLoader';\nimport { ImSearch } from 'react-icons/im';\nimport { useState } from 'react';\n\nimport {\n  SearchbarHeader,\n  SearchForm,\n  SearchFormButton,\n  SearchFormButtonLabel,\n  SearchFormInput,\n} from './Searchbar.styled';\n\nNotiflix.Notify.init({\n  position: 'right-top',\n  clickToClose: 'true',\n});\n\nconst Searchbar = ({ submitPropValue }) => {\n  const [query, setQuery] = useState('');\n//   const [loading, setLoading] = useState(false);\n\n  const handleInputChange = event => {\n    setQuery( event.currentTarget.value.toLowerCase());\n    // const { value } = event.currentTarget;\n    // setQuery(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (query.trim() === '') {\n      return Notiflix.Notify.warning('Please enter your query');\n    }\n    \n    // !передаем значение query в проп наверх\n    submitPropValue(query);\n    reset();\n  };\n\n  const reset = () => {\n    setQuery('');\n  };\n\n  // const override = {\n  //   // display: 'block',\n  //   // margin: '0 auto',\n  //   // borderColor: 'red',\n  // };\n\n\n  return (\n    <SearchbarHeader>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormButton type=\"submit\">\n          <ImSearch style={{ width: 22, height: 22 }} />\n          <SearchFormButtonLabel>Search</SearchFormButtonLabel>\n        </SearchFormButton>\n\n        <SearchFormInput\n          type=\"text\"\n          autocomplete=\"off\"\n          value={query}\n          onChange={handleInputChange}\n          name=\"query\"\n          // autofocus\n          placeholder=\"which movies would you like to find?\"\n        />\n        \n      </SearchForm>\n    </SearchbarHeader>\n  );\n};\n\nexport default Searchbar;\n\nSearchbar.propType = {\n  onSubmit: PropTypes.func.isRequired}","import Searchbar from \"../../modules/Searchbar/Searchbar\"\nimport { useSearchParams } from \"react-router-dom\";\nimport { useState, useEffect,  } from \"react\";\nimport Notiflix from \"notiflix\";\nimport { searchMovies } from \"../../services/api\";\nimport { Link ,useLocation} from \"react-router-dom\";\nimport defaultImg from '../../defaultImg/defaultImg.jpg'\nimport { FilmPoster, MovieItem, PosterTitle, MovieList } from 'modules/Movies/Movies.styled';\nconst IMG_PATH = 'https://image.tmdb.org/t/p/w500/'\n\n\nconst MovieSearch = () => {\n     \nconst [movies, setMovies] = useState([]);\nconst location = useLocation()\n// const [query, setQuery] = useState(\"\");\n// const [loading, setLoading] = useState(false);\nconst [, setError] = useState(null);\n// const [page, setPage] = useState(1);\n// const [, setTotallPages] = useState(0);\n// const [per_page] = useState(4);\n// // const isFirstRender = useState(true);\n// const [showModal, setShowModal] = useState(false);\n// const [largeImageURL, setLargeImageURL] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\nconst query = searchParams.get(\"query\")\n  const page = searchParams.get('page');\n  \nuseEffect(() => {\n  if (query === null) {\n    return;\n  }\n  const fetchMovieByKeyWord = async ( query) => {\n    try {\n    //   setLoading(true);\n      const response = await searchMovies(query);\n      \n      setMovies(response);\n      // setTotallPages(response.length / per_page);\n// console.log(response)\n      if (response.length === 0) {\n        return Notiflix.Notify.failure(\"Nothing found\");\n        // console.log(' nothing found');\n      }\n      // console.log(\"QUERY =>\", query);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n    //   setLoading(false);\n    }\n  };\n  fetchMovieByKeyWord( query);\n}, [query]);\n\nconst handleFormSubmit = (query) => {\n  // setQuery(query);\n  setSearchParams({query, page: 1 })\n  \n  setMovies([]);\n};\n\n\n   const loadMore = e => {\n     console.log('load more');\n     setSearchParams({query, page: Number(page) + 1 });\n\n   };\n//   const loadMore = useCallback(() => {\n   \n//   setSearchParams({ query , page: Number(page) + 1 });\n// }, [query]);\n\n\n\n    return (\n      <>\n        <Searchbar submitPropValue={handleFormSubmit} />\n\n        {movies && (\n          <MovieList>\n            {movies &&\n              movies.map(\n                ({\n                  name,\n                  original_title,\n                  id,\n                  poster_path,\n                  backdrop_path,                  \n                }) => (\n                  <Link\n                    key={id}\n                    to={`/movies/${id}`}\n                    state={{ from: location }}\n                  >\n                    <MovieItem>\n                      <FilmPoster\n                        src={\n                          poster_path || backdrop_path\n                            ? IMG_PATH + (poster_path ?? backdrop_path)\n                            : defaultImg\n                        }\n                        alt={name}\n                      />\n                      <PosterTitle>{name || original_title}</PosterTitle>\n                    </MovieItem>\n                  </Link>\n                )\n              )}\n          </MovieList>\n        )}\n\n        {movies.length > 0 && <button onClick={loadMore}>Load more</button>}\n      </>\n    );\n}\nexport default MovieSearch;","import axios from \"axios\";\n\nconst API_KEY = 'e2607c9eac62b5ef95e86e9fe77035f2';\nexport const BASE_URL = 'https://api.themoviedb.org/3/';\nexport const API_URL = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n\n\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/all/day?api_key=${API_KEY}`\n  );  \n\n  return response.data.results;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false&`\n  );\n\n  return response.data.results;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};"],"names":["MovieList","styled","MovieItem","PosterTitle","FilmPoster","CardWrap","Title","SearchbarHeader","SearchForm","SearchFormButton","SearchFormButtonLabel","SearchFormInput","Notiflix","position","clickToClose","Searchbar","submitPropValue","useState","query","setQuery","reset","onSubmit","event","preventDefault","trim","type","style","width","height","autocomplete","value","onChange","currentTarget","toLowerCase","name","placeholder","propType","PropTypes","movies","setMovies","location","useLocation","setError","useSearchParams","searchParams","setSearchParams","get","page","useEffect","fetchMovieByKeyWord","searchMovies","response","length","message","map","original_title","id","poster_path","backdrop_path","to","state","from","src","defaultImg","alt","onClick","e","console","log","Number","API_KEY","getTrending","axios","data","results","getMovieDetails","getMovieCredits","getMovieReviews"],"sourceRoot":""}